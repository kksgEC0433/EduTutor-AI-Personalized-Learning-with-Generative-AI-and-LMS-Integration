{"cells":[{"cell_type":"markdown","metadata":{"id":"kDn_lVxg3Z2G"},"source":["# Importing a library that is not in Colaboratory\n","\n","To import a library that's not in Colaboratory by default, you can use `!pip install` or `!apt-get install`."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GQ18Kd5F3uKe","executionInfo":{"status":"ok","timestamp":1751807642824,"user_tz":-330,"elapsed":12515,"user":{"displayName":"","userId":""}},"outputId":"01f34ec7-a275-4ca9-bb99-7e565b9f0eda"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.11/dist-packages (1.1.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (3.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (1.15.3)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (4.58.4)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.17.0)\n"]}],"source":["!pip install matplotlib-venn"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"__3eqm3q3sr-","executionInfo":{"status":"ok","timestamp":1751807651513,"user_tz":-330,"elapsed":4599,"user":{"displayName":"","userId":""}},"outputId":"f1dff903-5b1d-43f2-903e-4ee413385af3"},"outputs":[{"output_type":"stream","name":"stdout","text":["E: Package 'libfluidsynth1' has no installation candidate\n"]}],"source":["!apt-get -qq install -y libfluidsynth1"]},{"cell_type":"markdown","metadata":{"id":"apoRbfWsRZ7S"},"source":["# Install 7zip reader [libarchive](https://pypi.python.org/pypi/libarchive)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d_j7nNbKRmhx","executionInfo":{"status":"ok","timestamp":1751807687272,"user_tz":-330,"elapsed":13857,"user":{"displayName":"","userId":""}},"outputId":"cc181692-0776-485d-c379-e1a4fa83eed2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Selecting previously unselected package libarchive-dev:amd64.\n","(Reading database ... 126308 files and directories currently installed.)\n","Preparing to unpack .../libarchive-dev_3.6.0-1ubuntu1.5_amd64.deb ...\n","Unpacking libarchive-dev:amd64 (3.6.0-1ubuntu1.5) ...\n","Setting up libarchive-dev:amd64 (3.6.0-1ubuntu1.5) ...\n","Processing triggers for man-db (2.10.2-1) ...\n","Collecting libarchive\n","  Downloading libarchive-0.4.7.tar.gz (23 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting nose (from libarchive)\n","  Downloading nose-1.3.7-py3-none-any.whl.metadata (1.7 kB)\n","Downloading nose-1.3.7-py3-none-any.whl (154 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m154.7/154.7 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: libarchive\n","  Building wheel for libarchive (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for libarchive: filename=libarchive-0.4.7-py3-none-any.whl size=31629 sha256=df0b5be930512f8077bfd51966c0f24b55c2a05d3ed1b01c8834d8194b7d3dc3\n","  Stored in directory: /root/.cache/pip/wheels/32/98/bd/4893d6923dd027f455b250367d402bfd69a6f4416581df46db\n","Successfully built libarchive\n","Installing collected packages: nose, libarchive\n","Successfully installed libarchive-0.4.7 nose-1.3.7\n"]}],"source":["# https://pypi.python.org/pypi/libarchive\n","!apt-get -qq install -y libarchive-dev && pip install -U libarchive\n","import libarchive"]},{"cell_type":"markdown","metadata":{"id":"PeaSX9KXR58J"},"source":["# Install GraphViz & [PyDot](https://pypi.python.org/pypi/pydot)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w9llCG2wSRDx","executionInfo":{"status":"ok","timestamp":1751807723311,"user_tz":-330,"elapsed":6157,"user":{"displayName":"","userId":""}},"outputId":"2ea38b43-46cb-415e-9afb-24e25cfa3112"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pydot in /usr/local/lib/python3.11/dist-packages (3.0.4)\n","Requirement already satisfied: pyparsing>=3.0.9 in /usr/local/lib/python3.11/dist-packages (from pydot) (3.2.3)\n"]}],"source":["# https://pypi.python.org/pypi/pydot\n","!apt-get -qq install -y graphviz && pip install pydot\n","import pydot"]},{"cell_type":"markdown","metadata":{"id":"Tlh1MKxGrKFO"},"source":["# Install [cartopy](http://scitools.org.uk/cartopy/docs/latest/)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zq68DSY2rP2W","executionInfo":{"status":"ok","timestamp":1751807737217,"user_tz":-330,"elapsed":8623,"user":{"displayName":"","userId":""}},"outputId":"de39c85d-b630-42e1-a215-d79214965456"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting cartopy\n","  Downloading Cartopy-0.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.9 kB)\n","Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from cartopy) (2.0.2)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from cartopy) (3.10.0)\n","Requirement already satisfied: shapely>=1.8 in /usr/local/lib/python3.11/dist-packages (from cartopy) (2.1.1)\n","Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from cartopy) (24.2)\n","Requirement already satisfied: pyshp>=2.3 in /usr/local/lib/python3.11/dist-packages (from cartopy) (2.3.1)\n","Requirement already satisfied: pyproj>=3.3.1 in /usr/local/lib/python3.11/dist-packages (from cartopy) (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (4.58.4)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->cartopy) (2.9.0.post0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from pyproj>=3.3.1->cartopy) (2025.6.15)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->cartopy) (1.17.0)\n","Downloading Cartopy-0.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.7/11.7 MB\u001b[0m \u001b[31m106.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: cartopy\n","Successfully installed cartopy-0.24.1\n"]}],"source":["!pip install cartopy\n","import cartopy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9UnXK3i11_y","executionInfo":{"status":"ok","timestamp":1751811387841,"user_tz":-330,"elapsed":1778286,"user":{"displayName":"","userId":""}},"outputId":"4966dc4f-812b-4377-c233-e74c2c7d26d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Starting ElectroLearn Server for KKSG...\n"," * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:8000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"]},{"output_type":"stream","name":"stdout","text":["✅ Public URL (KKSG): NgrokTunnel: \"https://1836-34-118-240-204.ngrok-free.app\" -> \"http://localhost:8000\"\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:127.0.0.1 - - [06/Jul/2025 13:47:59] \"GET / HTTP/1.1\" 200 -\n","INFO:werkzeug:127.0.0.1 - - [06/Jul/2025 13:48:00] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n","WARNING:pyngrok.process.ngrok:t=2025-07-06T14:16:27+0000 lvl=warn msg=\"Stopping forwarder\" name=http-8000-94d7fc05-cefb-4639-9513-dda6196fc26f acceptErr=\"failed to accept connection: Listener closed\"\n"]}],"source":["# ElectroLearn API Server - Owned by KKSG\n","\n","# 1. Install dependencies\n","!pip install flask flask-cors requests pyngrok --quiet\n","\n","# 2. Imports\n","from flask import Flask, request, jsonify\n","from flask_cors import CORS\n","import requests\n","from pyngrok import ngrok\n","from threading import Thread\n","\n","# 3. Configuration (KKSG)\n","OWNER = \"KKSG\"\n","HF_TOKEN = \"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\"  # <-- Your Hugging Face token\n","NGROK_TOKEN = \"2zVEmKDEOa3H5RSJ929YtrGQKwn_mfL5W1ZGRwWWpmYuhak9\"  # <-- Your ngrok token\n","API_URL = \"https://api-inference.huggingface.co/models/ibm-granite/granite-3.3-2b-instruct\"\n","HEADERS = {\"Authorization\": f\"Bearer {HF_TOKEN}\"}\n","\n","# 4. Flask App Setup\n","app = Flask(__name__)\n","CORS(app)\n","\n","@app.route(\"/\")\n","def root():\n","    return f\"ElectroLearn Server (owned by {OWNER}) is running!\"\n","\n","@app.route(\"/api/chat\", methods=[\"POST\"])\n","def chat():\n","    data = request.json\n","    user_message = data.get(\"message\", \"\")\n","    if not user_message:\n","        return jsonify({\"error\": \"No message provided.\"}), 400\n","    payload = {\"inputs\": user_message}\n","    try:\n","        response = requests.post(API_URL, headers=HEADERS, json=payload, timeout=15)\n","        if response.ok and response.json():\n","            result = response.json()\n","            if isinstance(result, list) and result and 'generated_text' in result[0]:\n","                reply = result[0][\"generated_text\"]\n","            else:\n","                reply = \"No valid response from model.\"\n","        else:\n","            reply = f\"Model error: {response.text}\"\n","    except Exception as e:\n","        reply = f\"Server error: {str(e)}\"\n","    return jsonify({\"response\": reply})\n","\n","# 5. NGROK Tunnel Setup\n","def start_ngrok():\n","    try:\n","        ngrok.set_auth_token(NGROK_TOKEN)  # <-- Use your actual token!\n","        public_url = ngrok.connect(8000)\n","        print(f\"✅ Public URL (KKSG): {public_url}\")\n","    except Exception as e:\n","        print(f\"Ngrok error: {e}\")\n","\n","# 6. Flask Server Runner\n","def run_flask():\n","    try:\n","        print(f\"Starting ElectroLearn Server for {OWNER}...\")\n","        app.run(port=8000, use_reloader=False)\n","    except Exception as e:\n","        print(f\"Flask error: {e}\")\n","\n","# 7. Run everything!\n","Thread(target=start_ngrok, daemon=True).start()\n","run_flask()"]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/snippets/importing_libraries.ipynb","timestamp":1751811697905}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}